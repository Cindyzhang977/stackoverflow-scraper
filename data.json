[
    {
        "url": "https://stackoverflow.com/questions/10786042/java-url-encoding-of-query-string-parameters?r=SearchResults",
        "question": "Java URL encoding of query string parameters",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Say I have a URL </p>\n<pre><code>http://example.com/query?q=\n</code></pre>\n<p>and I have a query entered by the user such as:</p>\n<blockquote>\n<p>random word \u00a3500 bank $</p>\n</blockquote>\n<p>I want the result to be a properly encoded URL:</p>\n<pre><code>http://example.com/query?q=random%20word%20%A3500%20bank%20%24\n</code></pre>\n<p>What's the best way to achieve this? I tried <code>URLEncoder</code> and creating URI/URL objects but none of them come out quite right.</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\"><code>URLEncoder</code></a> is the way to go. You only need to keep in mind to encode <em>only</em> the individual query string parameter name and/or value, not the entire URL, for sure not the query string parameter separator character <code>&amp;</code> nor the parameter name-value separator character <code>=</code>.</p>\n<pre><code>String q = \"random word \u00a3500 bank $\";\nString url = \"https://example.com?q=\" + URLEncoder.encode(q, StandardCharsets.UTF_8);\n</code></pre>\n<p>When you're still not on Java 10 or newer, then use <code>StandardCharsets.UTF_8.toString()</code> as charset argument, or when you're still not on Java 7 or newer, then use <code>\"UTF-8\"</code>.</p>\n<hr/>\n<p>Note that spaces in query parameters are represented by <code>+</code>, not <code>%20</code>, which is legitimately valid. The <code>%20</code> is usually to be used to represent spaces in URI itself (the part before the URI-query string separator character <code>?</code>), not in query string (the part after <code>?</code>).</p>\n<p>Also note that there are three <code>encode()</code> methods. One without <code>Charset</code> as second argument and another with <code>String</code> as second argument which throws a checked exception. The one without <code>Charset</code> argument is deprecated. Never use it and always specify the <code>Charset</code> argument. The <a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\">javadoc</a> even explicitly recommends to use the UTF-8 encoding, as mandated by <a href=\"http://tools.ietf.org/html/rfc3986\" rel=\"nofollow noreferrer\">RFC3986</a> and <a href=\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\" rel=\"nofollow noreferrer\">W3C</a>.</p>\n<blockquote>\n<p>All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the byte. <strong>The recommended encoding scheme to use is UTF-8</strong>. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used.</p>\n</blockquote>\n<h3>See also:</h3>\n<ul>\n<li><a href=\"https://www.talisman.org/%7Eerlkonig/misc/lunatech%5Ewhat-every-webdev-must-know-about-url-encoding/\" rel=\"nofollow noreferrer\">What every web developer must know about URL encoding</a></li>\n</ul>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/724043/http-url-address-encoding-in-java?r=SearchResults",
        "question": "HTTP URL Address Encoding in Java",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>My Java standalone application gets a URL (which points to a file) from the user and I need to hit it and download it. The problem I am facing is that I am not able to encode the HTTP URL address properly...</p>\n<p>Example: </p>\n<pre><code>URL:  http://search.barnesandnoble.com/booksearch/first book.pdf\n\njava.net.URLEncoder.encode(url.toString(), \"ISO-8859-1\");\n</code></pre>\n<p>returns me:</p>\n<pre><code>http%3A%2F%2Fsearch.barnesandnoble.com%2Fbooksearch%2Ffirst+book.pdf\n</code></pre>\n<p>But, what I want is</p>\n<pre><code>http://search.barnesandnoble.com/booksearch/first%20book.pdf\n</code></pre>\n<p>(space replaced by %20)</p>\n<p>I guess <code>URLEncoder</code> is not designed to encode HTTP URLs... The JavaDoc says \"Utility class for HTML form encoding\"... Is there any other way to do this?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>The <a href=\"http://java.sun.com/javase/6/docs/api/java/net/URI.html\" rel=\"noreferrer\">java.net.URI</a> class can help; in the documentation of URL you find</p>\n<blockquote>\n<p>Note, the URI class does perform escaping of its component fields in certain circumstances. The recommended way to manage the encoding and decoding of URLs is to use an URI</p>\n</blockquote>\n<p>Use one of the constructors with more than one argument, like:</p>\n<pre><code>URI uri = new URI(\n    \"http\", \n    \"search.barnesandnoble.com\", \n    \"/booksearch/first book.pdf\",\n    null);\nURL url = uri.toURL();\n//or String request = uri.toString();\n</code></pre>\n<p><em>(the single-argument constructor of URI does NOT escape illegal characters)</em> </p>\n<hr/>\n<p>Only illegal characters get escaped by above code - it does NOT escape non-ASCII characters (see fatih's comment).<br/>\nThe <code>toASCIIString</code> method can be used to get a String only with US-ASCII characters:  </p>\n<pre><code>URI uri = new URI(\n    \"http\", \n    \"search.barnesandnoble.com\", \n    \"/booksearch/\u00e9\",\n    null);\nString request = uri.toASCIIString();\n</code></pre>\n<hr/>\n<p>For an URL with a query like <code>http://www.google.com/ig/api?weather=S\u00e3o Paulo</code>, use the 5-parameter version of the constructor:  </p>\n<pre><code>URI uri = new URI(\n        \"http\", \n        \"www.google.com\", \n        \"/ig/api\",\n        \"weather=S\u00e3o Paulo\",\n        null);\nString request = uri.toASCIIString();\n</code></pre>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests/2793153?r=SearchResults#2793153",
        "question": "How to use java.net.URLConnection to fire and handle HTTP requests?",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Use of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html\" rel=\"noreferrer\"><code>java.net.URLConnection</code></a> is asked about pretty often here, and the <a href=\"http://download.oracle.com/javase/tutorial/networking/urls/connecting.html\" rel=\"noreferrer\">Oracle tutorial</a> is <em>too</em> concise about it. </p>\n<p>That tutorial basically only shows how to fire a GET request and read the response. It doesn't explain anywhere how to use it to among others perform a POST request, set request headers, read response headers, deal with cookies, submit a HTML form, upload a file, etc. </p>\n<p>So, how can I use <code>java.net.URLConnection</code> to fire and handle \"advanced\" HTTP requests?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p><sup><em>First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial <code>IOException</code>s and <code>RuntimeException</code>s like <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code> and consorts yourself.</em></sup></p>\n<hr/>\n<h3>Preparing</h3>\n<p>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</p>\n<pre><code>String url = \"http://example.com\";\nString charset = \"UTF-8\";  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()\nString param1 = \"value1\";\nString param2 = \"value2\";\n// ...\n\nString query = String.format(\"param1=%s&amp;param2=%s\", \n     URLEncoder.encode(param1, charset), \n     URLEncoder.encode(param2, charset));\n</code></pre>\n<p>The query parameters must be in <code>name=value</code> format and be concatenated by <code>&amp;</code>. You would normally also <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\" rel=\"noreferrer\">URL-encode</a> the query parameters with the specified charset using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html#encode-java.lang.String-java.lang.String-\" rel=\"noreferrer\"><code>URLEncoder#encode()</code></a>.</p>\n<p><sup>The <code>String#format()</code> is just for convenience. I prefer it when I would need the String concatenation operator <code>+</code> more than twice.</sup></p>\n<hr/>\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3\" rel=\"noreferrer\">HTTP GET</a> request with (optionally) query parameters</h3>\n<p>It's a trivial task. It's the default request method.</p>\n<pre><code>URLConnection connection = new URL(url + \"?\" + query).openConnection();\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n<p>Any query string should be concatenated to the URL using <code>?</code>. The <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\" rel=\"noreferrer\"><code>Accept-Charset</code></a> header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the <code>Accept-Charset</code> header away. If you don't need to set any headers, then you can even use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29\" rel=\"noreferrer\"><code>URL#openStream()</code></a> shortcut method.</p>\n<pre><code>InputStream response = new URL(url).openStream();\n// ...\n</code></pre>\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\" rel=\"noreferrer\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\" rel=\"noreferrer\"><code>doGet()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\" rel=\"noreferrer\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n<p>For testing purposes, you can print the response body to stdout as below:</p>\n<pre><code>try (Scanner scanner = new Scanner(response)) {\n    String responseBody = scanner.useDelimiter(\"\\\\A\").next();\n    System.out.println(responseBody);\n}\n</code></pre>\n<hr/>\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5\" rel=\"noreferrer\">HTTP POST</a> request with query parameters</h3>\n<p>Setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\" rel=\"noreferrer\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code> implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type <code>application/x-www-form-urlencoded</code> wherein the query string is written to the request body.</p>\n<pre><code>URLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true); // Triggers POST.\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nconnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=\" + charset);\n\ntry (OutputStream output = connection.getOutputStream()) {\n    output.write(query.getBytes(charset));\n}\n\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n<p>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the <code>name=value</code> pairs of any <code>&lt;input type=\"hidden\"&gt;</code> elements into the query string and of course also the <code>name=value</code> pair of the <code>&lt;input type=\"submit\"&gt;</code> element which you'd like to \"press\" programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</p>\n<p>You can also cast the obtained <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html\" rel=\"noreferrer\"><code>URLConnection</code></a> to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\" rel=\"noreferrer\"><code>HttpURLConnection</code></a> and use its <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29\" rel=\"noreferrer\"><code>HttpURLConnection#setRequestMethod()</code></a> instead. But if you're trying to use the connection for output you still need to set <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\" rel=\"noreferrer\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code>.</p>\n<pre><code>HttpURLConnection httpConnection = (HttpURLConnection) new URL(url).openConnection();\nhttpConnection.setRequestMethod(\"POST\");\n// ...\n</code></pre>\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\" rel=\"noreferrer\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\" rel=\"noreferrer\"><code>doPost()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\" rel=\"noreferrer\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n<hr/>\n<h3>Actually firing the HTTP request</h3>\n<p>You can fire the HTTP request explicitly with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29\" rel=\"noreferrer\"><code>URLConnection#connect()</code></a>, but the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29\" rel=\"noreferrer\"><code>URLConnection#getInputStream()</code></a> and so on. The above examples does exactly that, so the <code>connect()</code> call is in fact superfluous.</p>\n<hr/>\n<h3>Gathering HTTP response information</h3>\n<ol>\n<li><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" rel=\"noreferrer\">HTTP response status</a>:</p>\n<p>You need a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\" rel=\"noreferrer\"><code>HttpURLConnection</code></a> here. Cast it first if necessary.</p>\n<pre><code>int status = httpConnection.getResponseCode();\n</code></pre></li>\n<li><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\" rel=\"noreferrer\">HTTP response headers</a>:</p>\n<pre><code>for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) {\n    System.out.println(header.getKey() + \"=\" + header.getValue());\n}\n</code></pre></li>\n<li><p><a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\" rel=\"noreferrer\">HTTP response encoding</a>:</p>\n<p>When the <code>Content-Type</code> contains a <code>charset</code> parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</p>\n<pre><code>String contentType = connection.getHeaderField(\"Content-Type\");\nString charset = null;\n\nfor (String param : contentType.replace(\" \", \"\").split(\";\")) {\n    if (param.startsWith(\"charset=\")) {\n        charset = param.split(\"=\", 2)[1];\n        break;\n    }\n}\n\nif (charset != null) {\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(response, charset))) {\n        for (String line; (line = reader.readLine()) != null;) {\n            // ... System.out.println(line) ?\n        }\n    }\n} else {\n    // It's likely binary content, use InputStream/OutputStream.\n}\n</code></pre></li>\n</ol>\n<hr/>\n<h3>Maintaining the session</h3>\n<p>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html\" rel=\"noreferrer\"><code>CookieHandler</code></a> API to maintain cookies. You need to prepare a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html\" rel=\"noreferrer\"><code>CookieManager</code></a> with a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html\" rel=\"noreferrer\"><code>CookiePolicy</code></a> of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL\" rel=\"noreferrer\"><code>ACCEPT_ALL</code></a> before sending all HTTP requests.</p>\n<pre><code>// First set the default cookie manager.\nCookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));\n\n// All the following subsequent URLConnections will use the same cookie manager.\nURLConnection connection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n</code></pre>\n<p>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all <code>Set-Cookie</code> headers from the response of the login or the first <code>GET</code> request and then pass this through the subsequent requests.</p>\n<pre><code>// Gather all cookies on the first request.\nURLConnection connection = new URL(url).openConnection();\nList&lt;String&gt; cookies = connection.getHeaderFields().get(\"Set-Cookie\");\n// ...\n\n// Then use the same cookies on all subsequent requests.\nconnection = new URL(url).openConnection();\nfor (String cookie : cookies) {\n    connection.addRequestProperty(\"Cookie\", cookie.split(\";\", 2)[0]);\n}\n// ...\n</code></pre>\n<p>The <code>split(\";\", 2)[0]</code> is there to get rid of cookie attributes which are irrelevant for the server side like <code>expires</code>, <code>path</code>, etc. Alternatively, you could also use <code>cookie.substring(0, cookie.indexOf(';'))</code> instead of <code>split()</code>.</p>\n<hr/>\n<h3>Streaming mode</h3>\n<p>The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\" rel=\"noreferrer\"><code>HttpURLConnection</code></a> will by default buffer the <em>entire</em> request body before actually sending it, regardless of whether you've set a fixed content length yourself using <code>connection.setRequestProperty(\"Content-Length\", contentLength);</code>. This may cause <code>OutOfMemoryException</code>s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29\" rel=\"noreferrer\"><code>HttpURLConnection#setFixedLengthStreamingMode()</code></a>.</p>\n<pre><code>httpConnection.setFixedLengthStreamingMode(contentLength);\n</code></pre>\n<p>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\" rel=\"noreferrer\"><code>HttpURLConnection#setChunkedStreamingMode()</code></a> accordingly. This will set the HTTP <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41\" rel=\"noreferrer\"><code>Transfer-Encoding</code></a> header to <code>chunked</code> which will force the request body being sent in chunks. The below example will send the body in chunks of 1KB.</p>\n<pre><code>httpConnection.setChunkedStreamingMode(1024);\n</code></pre>\n<hr/>\n<h3>User-Agent</h3>\n<p>It can happen that <a href=\"https://stackoverflow.com/questions/13670692/403-forbidden-with-java-but-not-web-browser\">a request returns an unexpected response, while it works fine with a real web browser</a>. The server side is probably blocking requests based on the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43\" rel=\"noreferrer\"><code>User-Agent</code></a> request header. The <code>URLConnection</code> will by default set it to <code>Java/1.6.0_19</code> where the last part is obviously the JRE version. You can override this as follows:</p>\n<pre><code>connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"); // Do as if you're using Chrome 41 on Windows 7.\n</code></pre>\n<p>Use the User-Agent string from a <a href=\"http://www.useragentstring.com/pages/useragentstring.php\" rel=\"noreferrer\">recent browser</a>.</p>\n<hr/>\n<h3>Error handling</h3>\n<p>If the HTTP response code is <code>4nn</code> (Client Error) or <code>5nn</code> (Server Error), then you may want to read the <code>HttpURLConnection#getErrorStream()</code> to see if the server has sent any useful error information.</p>\n<pre><code>InputStream error = ((HttpURLConnection) connection).getErrorStream();\n</code></pre>\n<p>If the HTTP response code is -1, then something went wrong with connection and response handling. The <code>HttpURLConnection</code> implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the <code>http.keepAlive</code> system property to <code>false</code>. You can do this programmatically in the beginning of your application by:</p>\n<pre><code>System.setProperty(\"http.keepAlive\", \"false\");\n</code></pre>\n<hr/>\n<h3>Uploading files</h3>\n<p>You'd normally use <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2\" rel=\"noreferrer\"><code>multipart/form-data</code></a> encoding for mixed POST content (binary and character data). The encoding is in more detail described in <a href=\"http://www.faqs.org/rfcs/rfc2388.html\" rel=\"noreferrer\">RFC2388</a>.</p>\n<pre><code>String param = \"value\";\nFile textFile = new File(\"/path/to/file.txt\");\nFile binaryFile = new File(\"/path/to/file.bin\");\nString boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.\nString CRLF = \"\\r\\n\"; // Line separator required by multipart/form-data.\nURLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\ntry (\n    OutputStream output = connection.getOutputStream();\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);\n) {\n    // Send normal param.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"param\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF);\n    writer.append(CRLF).append(param).append(CRLF).flush();\n\n    // Send text file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"textFile\\\"; filename=\\\"\" + textFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF); // Text file itself must be saved in this charset!\n    writer.append(CRLF).flush();\n    Files.copy(textFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // Send binary file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"binaryFile\\\"; filename=\\\"\" + binaryFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: \" + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);\n    writer.append(\"Content-Transfer-Encoding: binary\").append(CRLF);\n    writer.append(CRLF).flush();\n    Files.copy(binaryFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // End of multipart/form-data.\n    writer.append(\"--\" + boundary + \"--\").append(CRLF).flush();\n}\n</code></pre>\n<p>If the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\" rel=\"noreferrer\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\" rel=\"noreferrer\"><code>doPost()</code></a> method will be called and the parts will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29\" rel=\"noreferrer\"><code>HttpServletRequest#getPart()</code></a> (note, thus <strong>not</strong> <code>getParameter()</code> and so on!). The <code>getPart()</code> method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc). Prior to Servlet 3.0, your best choice is using <a href=\"http://commons.apache.org/fileupload\" rel=\"noreferrer\">Apache Commons FileUpload</a> to parse a <code>multipart/form-data</code> request. Also see <a href=\"https://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824\">this answer</a> for examples of both the FileUpload and the Servelt 3.0 approaches.</p>\n<hr/>\n<h3>Dealing with untrusted or misconfigured HTTPS sites</h3>\n<p>Sometimes you need to connect a HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a <code>javax.net.ssl.SSLException: Not trusted server certificate</code> on some HTTPS sites who doesn't keep their SSL certificates up to date, or a <code>java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found</code> or <code>javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name</code> on some misconfigured HTTPS sites.</p>\n<p>The following one-time-run <code>static</code> initializer in your web scraper class should make <code>HttpsURLConnection</code> more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</p>\n<pre><code>static {\n    TrustManager[] trustAllCertificates = new TrustManager[] {\n        new X509TrustManager() {\n            @Override\n            public X509Certificate[] getAcceptedIssuers() {\n                return null; // Not relevant.\n            }\n            @Override\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n            @Override\n            public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n        }\n    };\n\n    HostnameVerifier trustAllHostnames = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true; // Just allow them all.\n        }\n    };\n\n    try {\n        System.setProperty(\"jsse.enableSNIExtension\", \"false\");\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCertificates, new SecureRandom());\n        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        HttpsURLConnection.setDefaultHostnameVerifier(trustAllHostnames);\n    }\n    catch (GeneralSecurityException e) {\n        throw new ExceptionInInitializerError(e);\n    }\n}\n</code></pre>\n<hr/>\n<h3>Last words</h3>\n<p>The <a href=\"http://hc.apache.org/httpcomponents-client-ga/\" rel=\"noreferrer\">Apache HttpComponents HttpClient</a> is <em>much</em> more convenient in this all :)</p>\n<ul>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/tutorial/html/\" rel=\"noreferrer\">HttpClient Tutorial</a></li>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/examples.html\" rel=\"noreferrer\">HttpClient Examples</a></li>\n</ul>\n<hr/>\n<h3>Parsing and extracting HTML</h3>\n<p>If all you want is parsing and extracting data from HTML, then better use a HTML parser like <a href=\"http://jsoup.org\" rel=\"noreferrer\">Jsoup</a></p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281\">What are the pros/cons of leading HTML parsers in Java</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555\">How to scan and extract a webpage in Java</a></li>\n</ul>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/10786042/java-url-encoding-of-query-string-parameters/10786112?r=SearchResults#10786112",
        "question": "Java URL encoding of query string parameters",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Say I have a URL </p>\n<pre><code>http://example.com/query?q=\n</code></pre>\n<p>and I have a query entered by the user such as:</p>\n<blockquote>\n<p>random word \u00a3500 bank $</p>\n</blockquote>\n<p>I want the result to be a properly encoded URL:</p>\n<pre><code>http://example.com/query?q=random%20word%20%A3500%20bank%20%24\n</code></pre>\n<p>What's the best way to achieve this? I tried <code>URLEncoder</code> and creating URI/URL objects but none of them come out quite right.</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\"><code>URLEncoder</code></a> is the way to go. You only need to keep in mind to encode <em>only</em> the individual query string parameter name and/or value, not the entire URL, for sure not the query string parameter separator character <code>&amp;</code> nor the parameter name-value separator character <code>=</code>.</p>\n<pre><code>String q = \"random word \u00a3500 bank $\";\nString url = \"https://example.com?q=\" + URLEncoder.encode(q, StandardCharsets.UTF_8);\n</code></pre>\n<p>When you're still not on Java 10 or newer, then use <code>StandardCharsets.UTF_8.toString()</code> as charset argument, or when you're still not on Java 7 or newer, then use <code>\"UTF-8\"</code>.</p>\n<hr/>\n<p>Note that spaces in query parameters are represented by <code>+</code>, not <code>%20</code>, which is legitimately valid. The <code>%20</code> is usually to be used to represent spaces in URI itself (the part before the URI-query string separator character <code>?</code>), not in query string (the part after <code>?</code>).</p>\n<p>Also note that there are three <code>encode()</code> methods. One without <code>Charset</code> as second argument and another with <code>String</code> as second argument which throws a checked exception. The one without <code>Charset</code> argument is deprecated. Never use it and always specify the <code>Charset</code> argument. The <a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\">javadoc</a> even explicitly recommends to use the UTF-8 encoding, as mandated by <a href=\"http://tools.ietf.org/html/rfc3986\" rel=\"nofollow noreferrer\">RFC3986</a> and <a href=\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\" rel=\"nofollow noreferrer\">W3C</a>.</p>\n<blockquote>\n<p>All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the byte. <strong>The recommended encoding scheme to use is UTF-8</strong>. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used.</p>\n</blockquote>\n<h3>See also:</h3>\n<ul>\n<li><a href=\"https://www.talisman.org/%7Eerlkonig/misc/lunatech%5Ewhat-every-webdev-must-know-about-url-encoding/\" rel=\"nofollow noreferrer\">What every web developer must know about URL encoding</a></li>\n</ul>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/5330104/encoding-url-query-parameters-in-java?r=SearchResults",
        "question": "Encoding URL query parameters in Java",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>How does one encode query parameters to go on a url in Java?  I know, this seems like an obvious and already asked question.</p>\n<p>There are two subtleties I'm not sure of:</p>\n<ol>\n<li>Should spaces be encoded on the url as \"+\" or as \"%20\"?  In chrome if I type in \"http://google.com/foo=?bar me\" chrome changes it to be encoded with %20</li>\n<li>Is it necessary/correct to encode colons \":\" as %3B?  Chrome doesn't.</li>\n</ol>\n<p>Notes:</p>\n<ul>\n<li><code>java.net.URLEncoder.encode</code> doesn't seem to work, it seems to be for encoding data to be form submitted. For example, it encodes space as <code>+</code> instead of <code>%20</code>, and encodes colon which isn't necessary.</li>\n<li><code>java.net.URI</code> doesn't encode query parameters</li>\n</ul>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"http://download.oracle.com/javase/6/docs/api/java/net/URLEncoder.html#encode%28java.lang.String,%20java.lang.String%29\" rel=\"noreferrer\"><code>java.net.URLEncoder.encode(String s, String encoding)</code></a> can help too. It follows the HTML form encoding <code>application/x-www-form-urlencoded</code>.</p>\n<pre><code>URLEncoder.encode(query, \"UTF-8\");\n</code></pre>\n<hr/>\n<p>On the other hand, <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\" rel=\"noreferrer\">Percent-encoding</a> (also known as <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\" rel=\"noreferrer\">URL encoding</a>) encodes space with <code>%20</code>. Colon is a reserved character, so <code>:</code> will still remain a colon, after encoding.</p>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/16466630/java-webservice-url-encoding?r=SearchResults",
        "question": "java webservice url encoding",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>I host a 10 year old java (jar) based web service on Tomcat.\nThe original source for this service no longer exists (actually the firm that created the service no longer exists and there doesn't seem to be any way to find the former principals).</p>\n<p>I packet captured the \"Data\" field in the url and include a snip of it below.</p>\n<p>I'm hoping someone will recognize the encoding used on this field - it does not appear to be standard where the rest of the URL encoding it no problem.  So I'm thinking the application posting the data field first encodes the field (which is then again encoded for the URL post command.</p>\n<p>http:// ... &amp;CompletedBillableTransactionFlag=&amp;Data=%F0j%B2g%1F-%95%F7%E3E%C0q%A6%12%11%B2%7C%D8%C7%F6%C8%24 ... I could have included the rest of the fields value but thought to keep it short.</p>\n</div>",
        "answers": []
    },
    {
        "url": "https://stackoverflow.com/questions/10276473/url-encoding-in-java?r=SearchResults",
        "question": "url encoding in java?",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>I want to know that what is <em>url encoding</em>.\nI have 2 jsp pages and one servlet.\nWhen I run the application the url displayed is :</p>\n<p><code>http://localhost:8080/myproject/index.jsp</code></p>\n<p>where</p>\n<p><strong>index.jsp :</strong></p>\n<pre><code>&lt;form action=\"Myservlet\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"mytext\" id=\"mytext\"/&gt;\n    &lt;input type=\"submit\" value=\"submit\"/&gt;\n&lt;/form&gt;\n</code></pre>\n<p>after the submit button is clicked the URL displayed is :</p>\n<p><code>http://localhost:8080/myproject/Myservlet</code></p>\n<p><strong>What is the meaning of URL encoding? How can I encode url?</strong></p>\n<p>From <code>index.jsp</code> goes to <code>Myservlet</code> then to <code>result.jsp</code></p>\n<p><strong>Myservet#doPost</strong> // Do I need to do URL encoding here? If yes how ?</p>\n<pre><code>  fetching data from db.......\n  ....................\n  String nextJSP = \"/result.jsp\";\n  RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(nextJSP);\n  dispatcher.forward(request,response);\n</code></pre>\n<p><strong>result.jsp</strong></p>\n<p><code>displays data here</code></p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>There are two types of encoding: <a href=\"http://www.w3schools.com/tags/ref_urlencode.asp\" rel=\"noreferrer\">HTML form encoding</a> and <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/bnagm.html#bnagr\" rel=\"noreferrer\">URL re-writing</a>.</p>\n<p>In form encoding, the URL string is converted into a valid ASCII format that's Internet-ready.  From the <a href=\"http://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html#encode%28java.lang.String,%20java.lang.String%29\" rel=\"noreferrer\">URLEncoder.encode(String, String)</a> docs:</p>\n<blockquote>\n<p>Translates a string into application/x-www-form-urlencoded format\n  using a specific encoding scheme. This method uses the supplied\n  encoding scheme to obtain the bytes for unsafe characters.</p>\n</blockquote>\n<p>The second kind is URL rewriting. The URL string is encoded with a session id in case the client browser doesn't support (or has disabled) cookies or session tracking. From the <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html#encodeURL%28java.lang.String%29\" rel=\"noreferrer\">HttpServletResponse.encodeURL(String)</a> docs:</p>\n<blockquote>\n<p>Encodes the specified URL by including the session ID in it, or, if\n  encoding is not needed, returns the URL unchanged. The implementation\n  of this method includes the logic to determine whether the session ID\n  needs to be encoded in the URL. For example, if the browser supports\n  cookies, or session tracking is turned off, URL encoding is\n  unnecessary.</p>\n</blockquote>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/13437979/url-encoding-in-javascript-and-java-servlet?r=SearchResults",
        "question": "URL encoding in Javascript and Java servlet",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>I have a Java script that should call and pass parameters servlet using url encoding. The java script gets the parameters from the html form. I have done this and validated the input. I'm not sure how to encode the url in java script.</p>\n<p>The parameters are title=XXXX and type=YYYY. The servlet url is www.xxxx:Port#/folder/servlet. I have the code in place to retrieve the parameters from the url in servlet. I'd like to know how exactly to build the url using url encoding. </p>\n<p>Further more the Javaservlet should retrieve the parameters and call a perl function. Again here url encoding is to be used.I'd appreciate any help here. </p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>Look on this answer: <a href=\"https://stackoverflow.com/questions/332872/how-to-encode-a-url-in-javascript\">Encode URL in JavaScript?</a><br/>\nExample:</p>\n<pre><code>var myOtherUrl = \n       \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/6138127/how-to-do-url-decoding-in-java/6138183?r=SearchResults#6138183",
        "question": "How to do URL decoding in Java?",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p><strong>In Java, I want to convert this:</strong></p>\n<pre><code>https%3A%2F%2Fmywebsite%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Frequest_type\n</code></pre>\n<p><strong>To this:</strong></p>\n<pre><code>https://mywebsite/docs/english/site/mybook.do&amp;request_type\n</code></pre>\n<p><strong>This is what I have so far:</strong></p>\n<pre><code>class StringUTF \n{\n    public static void main(String[] args) \n    {\n        try{\n            String url = \n               \"https%3A%2F%2Fmywebsite%2Fdocs%2Fenglish%2Fsite%2Fmybook.do\" +\n               \"%3Frequest_type%3D%26type%3Dprivate\";\n\n            System.out.println(url+\"Hello World!-------&gt;\" +\n                new String(url.getBytes(\"UTF-8\"),\"ASCII\"));\n        }\n        catch(Exception E){\n        }\n    }\n}\n</code></pre>\n<p>But it doesn't work right.  What are these <code>%3A</code> and <code>%2F</code> formats called and how do I convert them?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>This does not have anything to do with character encodings such as UTF-8 or ASCII. The string you have there is <em>URL encoded</em>. This kind of encoding is something entirely different than character encoding.</p>\n<p>Try something like this:</p>\n<pre><code>try {\n    String result = java.net.URLDecoder.decode(url, StandardCharsets.UTF_8.name());\n} catch (UnsupportedEncodingException e) {\n    // not going to happen - value came from JDK's own StandardCharsets\n}\n</code></pre>\n<p>Java 10 added direct support for <code>Charset</code> to the API, meaning there's no need to catch UnsupportedEncodingException:</p>\n<pre><code>String result = java.net.URLDecoder.decode(url, StandardCharsets.UTF_8);\n</code></pre>\n<p>Note that a <em>character encoding</em> (such as UTF-8 or ASCII) is what determines the mapping of characters to raw bytes. For a good intro to character encodings, see <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" rel=\"noreferrer\">this article</a>.</p>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/17709979/java-url-encoding?r=SearchResults",
        "question": "Java URL encoding",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>From my web application I am doing a redirect to an external URL which has some credentials as a part of the URL string. I would like to encode the credential part alone before redirection. I have the following URL:</p>\n<pre><code>String url1 = \"http://servername:7778/reports/rwservlet?server=server1&amp;ORACLE_SHUTDOWN=YES&amp;PARAMFORM=no&amp;report=test.rdf&amp;desformat=pdf&amp;desname=test.pdf&amp;destype=cache&amp;param1=56738&amp;faces-redirect=true&amp;\";\n</code></pre>\n<p>I am encoding it as:</p>\n<pre><code>String URL = \"userid=username/passwd@DBname\";\nencodedURL = URLEncoder.encode(URL, \"UTF-8\");\nString redirectURL = url1 + encodedURL1;\n</code></pre>\n<p>The URL generated by this code is</p>\n<pre><code>http://servername:7778/reports/rwservlet?server=server1&amp;ORACLE_SHUTDOWN=YES&amp;PARAMFORM=no&amp;report=test.rdf&amp;desformat=pdf&amp;desname=test.pdf&amp;destype=cache&amp;param1=56738&amp;faces-redirect=true&amp;userid=%3Dusername%2Fpasswd%40DBname\n</code></pre>\n<p>As we can see towards the end of the encoded URL, only the special characters like / have been encoded. i.e. <code>userid=username/passwd@DBname</code> has become <code>userid=%3Dusername%2Fpasswd%40DBname</code></p>\n<p>I want to generate a URL which will have the the entire string \"username/passwd@DBname\" encoded . Something like :</p>\n<pre><code>userid=%61%62\n</code></pre>\n<p>How can I achieve this?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>So in fact you want the url to become somewhat unreadable, without the need for decoding, Decoding would be needed for a Base64 encoding (with replacing <code>/</code> and <code>-</code>).</p>\n<p>Yes you may abuse the URL encoding.</p>\n<pre><code>String encodeURL(String s) {\n    byte[] bytes = s.getBytes(\"UTF-8\");\n    StringBuilder sb = new StringBuilder();\n    for (byte b : bytes) {\n        String hex = String.format(\"%%%02X\", ((int)b) &amp; 0xFF);\n        sb.append(hex);\n    }\n    return sb.toString();\n}\n</code></pre>\n<p>%% being the percentage sign itself, and %02X hex, 2 digits, zero-filled, capitals.</p>\n<p>Mind that some browsers will display such links decoded, on mouse-over. But you are just redirecting.</p>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/14321873/java-url-encoding-urlencoder-vs-uri?r=SearchResults",
        "question": "Java URL encoding: URLEncoder vs. URI",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Looking on the <a href=\"http://www.w3schools.com/tags/ref_urlencode.asp\">W3 Schools URL encoding webpage</a>, it says that <code>@</code> should be encoded as <code>%40</code>, and that <code>space</code> should be encoded as <code>%20</code>.</p>\n<p>I've tried both <code>URLEncoder</code> and <code>URI</code>, but neither does the above properly:</p>\n<pre><code>import java.net.URI;\nimport java.net.URLEncoder;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n\n        // Prints me%40home.com (CORRECT)\n        System.out.println(URLEncoder.encode(\"me@home.com\", \"UTF-8\"));\n\n        // Prints Email+Address (WRONG: Should be Email%20Address)\n        System.out.println(URLEncoder.encode(\"Email Address\", \"UTF-8\"));\n\n        // http://www.home.com/test?Email%20Address=me@home.com\n        // (WRONG: it has not encoded the @ in the email address)\n        URI uri = new URI(\"http\", \"www.home.com\", \"/test\", \"Email Address=me@home.com\", null);\n        System.out.println(uri.toString());\n    }\n}\n</code></pre>\n<p>For some reason, <code>URLEncoder</code> does the email address correctly but not spaces, and <code>URI</code> does spaces currency but not email addresses.</p>\n<p>How should I encode these 2 parameters to be consistent with what w3schools says is correct (or is w3schools wrong?)</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>Although I think the answer from @fge is the right one, as I was using a 3rd party webservice that relied on the encoding outlined in the W3Schools article, I followed the answer from <a href=\"https://stackoverflow.com/questions/607176/java-equivalent-to-javascripts-encodeuricomponent-that-produces-identical-outpu\">Java equivalent to JavaScript's encodeURIComponent that produces identical output?</a></p>\n<pre><code>public static String encodeURIComponent(String s) {\n    String result;\n\n    try {\n        result = URLEncoder.encode(s, \"UTF-8\")\n                .replaceAll(\"\\\\+\", \"%20\")\n                .replaceAll(\"\\\\%21\", \"!\")\n                .replaceAll(\"\\\\%27\", \"'\")\n                .replaceAll(\"\\\\%28\", \"(\")\n                .replaceAll(\"\\\\%29\", \")\")\n                .replaceAll(\"\\\\%7E\", \"~\");\n    } catch (UnsupportedEncodingException e) {\n        result = s;\n    }\n\n    return result;\n}\n</code></pre>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/52734339/url-encoding-for-url-that-contains-username-ans-password-using-java-javascript?r=SearchResults",
        "question": "Java URL encoding of query string parameters",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Say I have a URL </p>\n<pre><code>http://example.com/query?q=\n</code></pre>\n<p>and I have a query entered by the user such as:</p>\n<blockquote>\n<p>random word \u00a3500 bank $</p>\n</blockquote>\n<p>I want the result to be a properly encoded URL:</p>\n<pre><code>http://example.com/query?q=random%20word%20%A3500%20bank%20%24\n</code></pre>\n<p>What's the best way to achieve this? I tried <code>URLEncoder</code> and creating URI/URL objects but none of them come out quite right.</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p><a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\"><code>URLEncoder</code></a> is the way to go. You only need to keep in mind to encode <em>only</em> the individual query string parameter name and/or value, not the entire URL, for sure not the query string parameter separator character <code>&amp;</code> nor the parameter name-value separator character <code>=</code>.</p>\n<pre><code>String q = \"random word \u00a3500 bank $\";\nString url = \"https://example.com?q=\" + URLEncoder.encode(q, StandardCharsets.UTF_8);\n</code></pre>\n<p>When you're still not on Java 10 or newer, then use <code>StandardCharsets.UTF_8.toString()</code> as charset argument, or when you're still not on Java 7 or newer, then use <code>\"UTF-8\"</code>.</p>\n<hr/>\n<p>Note that spaces in query parameters are represented by <code>+</code>, not <code>%20</code>, which is legitimately valid. The <code>%20</code> is usually to be used to represent spaces in URI itself (the part before the URI-query string separator character <code>?</code>), not in query string (the part after <code>?</code>).</p>\n<p>Also note that there are three <code>encode()</code> methods. One without <code>Charset</code> as second argument and another with <code>String</code> as second argument which throws a checked exception. The one without <code>Charset</code> argument is deprecated. Never use it and always specify the <code>Charset</code> argument. The <a href=\"https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/net/URLEncoder.html\" rel=\"nofollow noreferrer\">javadoc</a> even explicitly recommends to use the UTF-8 encoding, as mandated by <a href=\"http://tools.ietf.org/html/rfc3986\" rel=\"nofollow noreferrer\">RFC3986</a> and <a href=\"http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars\" rel=\"nofollow noreferrer\">W3C</a>.</p>\n<blockquote>\n<p>All other characters are unsafe and are first converted into one or more bytes using some encoding scheme. Then each byte is represented by the 3-character string \"%xy\", where xy is the two-digit hexadecimal representation of the byte. <strong>The recommended encoding scheme to use is UTF-8</strong>. However, for compatibility reasons, if an encoding is not specified, then the default encoding of the platform is used.</p>\n</blockquote>\n<h3>See also:</h3>\n<ul>\n<li><a href=\"https://www.talisman.org/%7Eerlkonig/misc/lunatech%5Ewhat-every-webdev-must-know-about-url-encoding/\" rel=\"nofollow noreferrer\">What every web developer must know about URL encoding</a></li>\n</ul>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/5019210/java-url-encoding-leaving-allowed-character-intact?r=SearchResults",
        "question": "Java: url encoding leaving 'allowed' character intact",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>Simple question from a Java novice.\nI want to encode a url so that nonstandard characters will be transformed to their hex value (that is %XX) while characters one expects to see in a url - letter, digits, forward slashes, question marks and whatever, will be left intact.</p>\n<p>For example, encoding </p>\n<pre><code>\"hi/hello?who=moris\\\\boris\"\n</code></pre>\n<p>should result with</p>\n<pre><code>\"hi/hello?who=moris%5cboris\"\n</code></pre>\n<p>ideas?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>This is actually, a rather tricky problem.  And the reason that it is tricky is that the different parts of a URL need to be handled (encoded) differently.</p>\n<p>In my experience, the best way to do this is to assemble the url from its components using the URL or URI class, letting the <em>them</em> take care of the encoding the components correctly.</p>\n<hr/>\n<p>In fact, now that I think about it, you have to encode the components before they get assembled.  Once the parts are assembled it is <em>impossible</em> to tell whether (for example) a \"?\" is intended to the query separator (don't escape it) or a character in a pathname component (escape it).</p>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/7243750/download-file-from-web-in-python-3?r=SearchResults",
        "question": "Download file from web in Python 3",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>I am creating a program that will download a .jar (java) file from a web server, by reading the URL that is specified in the .jad file of the same game/application. I'm using Python 3.2.1</p>\n<p>I've managed to extract the URL of the JAR file from the JAD file (every JAD file contains the URL to the JAR file), but as you may imagine, the extracted value is type() string. </p>\n<p>Here's the relevant function:</p>\n<pre><code>def downloadFile(URL=None):\n    import httplib2\n    h = httplib2.Http(\".cache\")\n    resp, content = h.request(URL, \"GET\")\n    return content\n\ndownloadFile(URL_from_file)\n</code></pre>\n<p>However I always get an error saying that the type in the function above has to be bytes, and not string. I've tried using the URL.encode('utf-8'), and also bytes(URL,encoding='utf-8'), but I'd always get the same or similar error.</p>\n<p>So basically my question is how to download a file from a server when the URL is stored in a string type?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>If you want to obtain the contents of a web page into a variable, just <code>read</code> the response of <a href=\"http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlopen\" rel=\"noreferrer\"><strong><code>urllib.request.urlopen</code></strong></a>:</p>\n<pre><code>import urllib.request\n...\nurl = 'http://example.com/'\nresponse = urllib.request.urlopen(url)\ndata = response.read()      # a `bytes` object\ntext = data.decode('utf-8') # a `str`; this step can't be used if data is binary\n</code></pre>\n<hr/>\n<p>The easiest way to download and save a file is to use the <a href=\"http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlretrieve\" rel=\"noreferrer\"><strong><code>urllib.request.urlretrieve</code></strong></a> function:</p>\n<pre><code>import urllib.request\n...\n# Download the file from `url` and save it locally under `file_name`:\nurllib.request.urlretrieve(url, file_name)\n</code></pre>\n<pre><code>import urllib.request\n...\n# Download the file from `url`, save it in a temporary directory and get the\n# path to it (e.g. '/tmp/tmpb48zma.txt') in the `file_name` variable:\nfile_name, headers = urllib.request.urlretrieve(url)\n</code></pre>\n<p>But keep in mind that <code>urlretrieve</code> is considered <a href=\"http://docs.python.org/dev/library/urllib.request.html#legacy-interface\" rel=\"noreferrer\">legacy</a> and might become deprecated (not sure why, though).</p>\n<p>So the most <em>correct</em> way to do this would be to use the <a href=\"http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlopen\" rel=\"noreferrer\"><strong><code>urllib.request.urlopen</code></strong></a> function to return a file-like object that represents an HTTP response and copy it to a real file using <a href=\"http://docs.python.org/dev/library/shutil.html#shutil.copyfileobj\" rel=\"noreferrer\"><strong><code>shutil.copyfileobj</code></strong></a>.</p>\n<pre><code>import urllib.request\nimport shutil\n...\n# Download the file from `url` and save it locally under `file_name`:\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n    shutil.copyfileobj(response, out_file)\n</code></pre>\n<p>If this seems too complicated, you may want to go simpler and store the whole download in a <code>bytes</code> object and then write it to a file. But this works well only for small files.</p>\n<pre><code>import urllib.request\n...\n# Download the file from `url` and save it locally under `file_name`:\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n    data = response.read() # a `bytes` object\n    out_file.write(data)\n</code></pre>\n<hr/>\n<p>It is possible to extract <code>.gz</code> (and maybe other formats) compressed data on the fly, but such an operation probably requires the HTTP server to support random access to the file.</p>\n<pre><code>import urllib.request\nimport gzip\n...\n# Read the first 64 bytes of the file inside the .gz archive located at `url`\nurl = 'http://example.com/something.gz'\nwith urllib.request.urlopen(url) as response:\n    with gzip.GzipFile(fileobj=response) as uncompressed:\n        file_header = uncompressed.read(64) # a `bytes` object\n        # Or do anything shown above using `uncompressed` instead of `response`.\n</code></pre>\n</div>"
    },
    {
        "url": "https://stackoverflow.com/questions/11448715/url-encoding-in-java-mail?r=SearchResults",
        "question": "URL Encoding in Java Mail",
        "post": "<div class=\"post-text\" itemprop=\"text\">\n<p>I have written a code in java, where there are forms (input fields) and finally a send email button at the bottom. when the user clicks on the button, the data from the input fields should get extracted then be used as data for the body in the email.</p>\n<p>this is the code i have:</p>\n<pre><code>if (role.getValue().equals(\"1\")) {          \n    Desktop desktop = Desktop.getDesktop();\n    String message = \"mailto:username@domain.com?subject=Profildaten&amp;body=\" +\n                     \"Externe%20Referenz:%20\" +\n                     person.getExternalReference() + \"%20\" + \"-%20\" +\n                     person.getExternalReferenceType() + \"%0A\" +\n                     person.getTitle() + \"%20\" +\n                     person.getContactLandline() + \"%0A\" +\n                     \"Mobil:%20\" + person.getContactMobile() + \"%0A\" +\n                     \"Addresse:\" + person.getContactStreet();\n\n    URI uri = URI.create(message); \n    try {\n        desktop.mail(uri);\n    } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n    }   \n}\n</code></pre>\n<p>It all works perfectly, but the only issue is for Address: person.getContactStreet() the actual input field requires the user to enter a street name, and usually it would be two words, e.g. Cromwell Road - with a space inbetween cromwell and road. now the body of the email doesnt allow to have spaces and other invalid characters, hence why it is popping an error message saying invalid characters have been entered. how can i make it accept this or convert the invalid characters automatically to url encodings?</p>\n</div>",
        "answers": "<div class=\"post-text\" itemprop=\"text\">\n<p>Have a look at this site, it tells you how to encode the URLS in the body automatically.</p>\n<p><a href=\"https://stackoverflow.com/questions/5291586/best-way-to-encode-url-in-java\">Best way to encode URL in Java</a></p>\n</div>"
    }
]